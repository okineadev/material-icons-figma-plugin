name: 🚀 Release + Publish

on: [workflow_dispatch]

permissions:
  id-token: write
  contents: write
  attestations: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          # Required for fetching tags and generating release notes
          fetch-depth: 0

      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@4bc047ad259df6fc24a6c9b0f9a0cb08cf17fbe5 # v2
        with:
          bun-version-file: ".bun-version"

      - name: 📦 Install dependencies
        run: |
          bun install --frozen-lockfile

      - name: 🔧 Configure Git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git config --global push.followTags true

      - name: 🛠️ Build plugin
        run: bun run build

      - name: 🧪 Run tests
        run: bun run test

      - name: 🚀 Prepare release
        run: bun run preversion

      - name: 📜 Generate changelog and release notes
        env:
          # Don't run husky on `git commit`
          HUSKY: 0
        run: |
          # Changelog for Figma
          CHANGELOG="$(bunx changelogen | tail -n +7)"
          echo "CHANGELOG=$CHANGELOG"  >> $GITHUB_ENV

          bunx changelogen --release --push
          bunx changelogen github release --token ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Get metadata
        run: |
          VERSION=$(jq -r '.version' package.json)
          NAME=$(jq -r '.name' package.json)

          ZIP_FILE="${NAME}-${VERSION}.zip"

          echo "VERSION=$VERSION"      >> $GITHUB_ENV
          echo "ZIP_FILE=$ZIP_FILE"    >> $GITHUB_ENV

      - name: 📦 Pack plugin
        run: zip -9TXjr $ZIP_FILE dist

      - name: 🔒 Attest artifacts
        uses: actions/attest-build-provenance@f9eaf234fc1c2e333c1eca18177db0f44fa6ba52 # v2.2.1
        # Read: https://docs.github.com/en/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds
        with:
          subject-path: ${{ env.ZIP_FILE }}

      - name: ⬆️ Upload plugin to GitHub release
        run: gh release upload v$VERSION $ZIP_FILE
        env:
          GH_TOKEN: ${{ github.token }}

      - name: 🚀 Publish plugin
        run: figcd release -m ./dist/manifest.json --release-notes "$CHANGELOG"
        env:
          FIGMA_WEB_AUTHN_TOKEN: ${{ secrets.FIGMA_WEB_AUTHN_TOKEN }}
